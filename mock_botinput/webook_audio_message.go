// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botinput (interfaces: WebhookAudioMessage)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botinput WebhookAudioMessage
//

// Package mock_botinput is a generated GoMock package.
package mock_botinput

import (
	reflect "reflect"

	botinput "github.com/bots-go-framework/bots-fw/botinput"
	gomock "go.uber.org/mock/gomock"
)

// MockWebhookAudioMessage is a mock of WebhookAudioMessage interface.
type MockWebhookAudioMessage struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookAudioMessageMockRecorder
	isgomock struct{}
}

// MockWebhookAudioMessageMockRecorder is the mock recorder for MockWebhookAudioMessage.
type MockWebhookAudioMessageMockRecorder struct {
	mock *MockWebhookAudioMessage
}

// NewMockWebhookAudioMessage creates a new mock instance.
func NewMockWebhookAudioMessage(ctrl *gomock.Controller) *MockWebhookAudioMessage {
	mock := &MockWebhookAudioMessage{ctrl: ctrl}
	mock.recorder = &MockWebhookAudioMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookAudioMessage) EXPECT() *MockWebhookAudioMessageMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockWebhookAudioMessage) Chat() botinput.WebhookChat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat")
	ret0, _ := ret[0].(botinput.WebhookChat)
	return ret0
}

// Chat indicates an expected call of Chat.
func (mr *MockWebhookAudioMessageMockRecorder) Chat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockWebhookAudioMessage)(nil).Chat))
}

// IntID mocks base method.
func (m *MockWebhookAudioMessage) IntID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// IntID indicates an expected call of IntID.
func (mr *MockWebhookAudioMessageMockRecorder) IntID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntID", reflect.TypeOf((*MockWebhookAudioMessage)(nil).IntID))
}

// StringID mocks base method.
func (m *MockWebhookAudioMessage) StringID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringID")
	ret0, _ := ret[0].(string)
	return ret0
}

// StringID indicates an expected call of StringID.
func (mr *MockWebhookAudioMessageMockRecorder) StringID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringID", reflect.TypeOf((*MockWebhookAudioMessage)(nil).StringID))
}
